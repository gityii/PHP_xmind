综述：
数组是值得有序集合。
每个值叫做一个元素，而每个元素在数组中有一个位置，以数字表示，称为索引。
数组的元素可以是任意类型，甚至可以是对象或其他数组，这可以创建复杂的数据结构，比如对象的数组或数组的数组。
JS数组是动态的，可以根据需要增长或缩减，并且在创建数组时无需声明一个固定的大小或者在数组大小变化时无须重新分配空间。
JS数组可以是稀疏的，数组元素的索引不一定要连续，它们之间可以有空缺。
每个JS数组都有一个length属性，针对非稀疏数组，该属性就是数组元素的个数；针对稀疏数组，length比所有元素的索引要大。
JS数组是JS对象的特殊形式，数组索引实际上和碰巧是整数的属性名差不多。通常，数组的实现是经过优化的，用数字索引来访问数组元素一般来说比访问常规的对象属性要快很多。
数组继承自Array.prototype中的属性，它定义了一套丰富的数组操作方法。


创建数组：
使用数组直接量，在方括号中将数组元素用逗号隔开即可。如下：
var empty = [];                 // An array with no elements
var primes = [2, 3, 5, 7, 11];  // An array with 5 numeric elements
var misc = [ 1.1, true, "a", ]; // 3 elements of various types + trailing comma


它可以包含对象直接量或其他数组直接量：
var b = [[1,{x:1, y:2}], [2, {x:3, y:4}]];

如果省略数组直接量中的某个值，省略的元素将被赋予undefined值：
var count = [1,,3]; // An array with 3 elements, the middle one undefined.
var undefs = [,,];  // An array with 2 elements, both undefined.结尾的逗号是可选的，故只有两个元素而非三个。

调用构造函数Array()是创建数组的另一种方法。

1、调用时没有参数： 
var a = new Array();改方法创建一个没有任何元素的空数组，等同于数组直接量[];

2、调用时时有一个数值参数，它指定长度,当预先指定所需元素个数时，这种形式的array()构造函数可以用来预分配一个数组空间。
var a = new Array(10);

3、显式指定两个或多个数组元素或者数组的一个非数值元素：
var a = new Array(5, 4, 3, 2, 1, "testing, testing");


数组元素的读和写：
使用[]来访问数组中的一个元素，数组的引用位于方括号的左边。方括号中是一个返回非负整数值得任意表达式。使用该语法既可以读又可以写数组的一个元素，如下所示：
var a = ["world"];     // Start with a one-element array
var value = a[0];      // Read element 0
a[1] = 3.14;           // Write element 1
i = 2;         
a[i] = 3;              // Write element 2
a[i + 1] = "hello";    // Write element 3
a[a[i]] = a[0];        // Read elements 0 and 2, write element 3

数组的特别之处在于会自动维护其length属性值。

常规对象也可以像数组一样用数字当索引来访问属性。

注意，可以使用负数或非整数来索引数组，这种情况下，数值转换为字符串，字符串作为属性名来用，既然名字不是非负整数，它就只能当做常规的对象属性，而非数组的索引。同样，如果凑巧使用了非负整数的字符串，它就当做数组索引，而非对象属性。当使用的一个浮点数和整数相等时情况也是一样的：
a[-1.23] = true;  // This creates a property named "-1.23"
a["1000"] = 0;    // This the 1001st element of the array
a[1.000]          // Array index 1.  Same as a[1]

数组索引仅仅是对象属性名的一种特殊类型。当试图查询任何对象中不存在的属性时，不会报错，只会得到undefined值。

稀疏数组：
a = new Array(5);   // No elements, but a.length is 5.
a = [];             // Create an array with no elements and length = 0.
a[1000] = 0;        // Assignment adds one element but sets length to 1001.

可以使用delete操作符来产生稀疏数组。

当在数组直接量中省略值时不会创建稀疏数组。省略的元素在数组中是存在的，其值为undefined。这和数组元素根本不存在是有一些区别的，可以用In 操作符检测两者之间的区别：
var a1 = [,,,];         // This array is [undefined, undefined, undefined]
var a2 = new Array(3);  // This array has no values at all
0 in a1                 // => true: a1 has an element with index 0
0 in a2                 // => false: a2 has no element with index 0
当用for/in循环时，a1和a2的区别也很明显。

var a1 = [,];  //此数组没有元素，长度是1


数组长度：
每个数组有一个length属性，就是这个属性使其区别与常规的JS对象。length属性值代表数组中元素的个数，其值比数组中最大的索引大1：
[].length   // =>0 数组没有元素
['a', 'b', 'c'].length   //=>3  最大索引为2，length为3

如果设置length属性为一个小于当前长度的非负整数n时，当前数组中那些索引大于或等于n的元素将从中删除：
a = [1,2,3,4,5];     // Start with a 5-element array.
a.length = 3;        // a is now [1,2,3].
a.length = 0;        // Delete all elements.  a is [].
a.length = 5;        // Length is 5, but no elements, like new Array(5)

还可以将数组的length属性值设置为大于其当前的长度。实际上这不会向数组中添加新的元素，它值是在数组尾部创建一个空的区域。
可以用Object.defineProperty()让数组的length属性变成只读的：
a = [1,2,3];                               // Start with a 3-element array.
Object.defineProperty(a, "length",         // Make the length property
                      {writable: false});  // readonly.
a.length = 0;                              // a is unchanged.


数组元素的添加和删除：
a = []           // Start with an empty array.
a[0] = "zero";   // And add elements to it.
a[1] = "one";

也可以使用push()方法在数组末尾增加一个或多个元素：
a = [];              // Start with an empty array
a.push("zero")       // Add a value at the end.  a = ["zero"]
a.push("one", "two") // Add two more values.  a = ["zero", "one", "two"]


在数组尾部压入一个元素与给数组a[a.length]赋值是一样的。可以使用unshift()方法在数组的首部插入一个元素，并且将其他元素依次移到更高的索引处。
可以像删除对象属性一样使用delete运算符来删除数组元素：
a = [1,2,3];   
delete a[1];   // a now has no element at index 1
1 in a         // => false: no array index 1 is defined 
a.length       // => 3: delete does not affect array length

数组有pop()方法，后者依次使减少长度1并返回被删除元素的值，还有一个shift()方法，从数组头部删除一个元素。和delete不同的是shift()方法将所有元素下移比当前索引低1的地方。splice()是一个通用的方法来插入、删除或替换数组元素，它会根据需要修改length属性并移动元素到更高或较低的索引处。


数组遍历：
for循环
var keys = Object.keys(o);   // Get an array of property names for object o
var values = []              // Store matching property values in this array
for(var i = 0; i < keys.length; i++) {  // For each index in the array
    var key = keys[i];                  // Get the key at that index
    values[i] = o[key];                 // Store the value in the values array
}

优化如下：
for(var i = 0, len = keys.length; i < len; i++) {
   // loop body remains the same
}


使用数组元素之前应该先检查它们：
 exclude null, undefined, and nonexistent elements, you can write this:
for(var i = 0; i < a.length; i++) {
    if (!a[i]) continue;  // Skip null, undefined, and nonexistent elements
    // loop body here
}


 skip undefined and nonexistent elements, you might write:
for(var i = 0; i < a.length; i++) {
    if (a[i] === undefined) continue; // Skip undefined + nonexistent elements
    // loop body here
}

 skip indexes for which no array element exists but still want
to handle existing undefined elements, do this:
for(var i = 0; i < a.length; i++) {
    if (!(i in a)) continue ; // Skip nonexistent elements
    // loop body here
}


还可以使用for/in循环处理稀疏数组。
规范允许for/in循环以不同顺序遍历对象的属性，如果算法依赖于遍历的顺序，那么最好不要使用for/in而用for循环。

foreach()方法：
按照索引的顺序按个传递给定义的一个函数：
var data = [1,2,3,4,5];     // This is the array we want to iterate
var sumOfSquares = 0;       // We want to compute the sum of the squares of data
data.forEach(function(x) {  // Pass each element of data to this function
                 sumOfSquares += x*x;  // add up the squares
             });
sumOfSquares                // =>55 : 1+4+9+16+25



数组方法：
array.join()方法将数组中所有元素都转化为字符串并连接在一起。返回最后生成的字符串。可以指定一个可选的字符串在生成的字符串中来分隔数组的各个元素，如果不指定分隔符，默认使用逗号，如下：
var a = [1, 2, 3];     // Create a new array with these three elements
a.join();              // => "1,2,3"
a.join(" ");           // => "1 2 3"
a.join("");            // => "123"
var b = new Array(10); // An array of length 10 with no elements
b.join('-')            // => '---------': a string of 9 hyphens


array.reverse()方法将数组中的元素颠倒顺序，返回逆序的数组。它是在原先的数组中重新排列它们。如：
var a = [1,2,3];
a.reverse().join()  // => "3,2,1" and a is now [3,2,1]


array.sort()方法将数组中的元素排序，返回排序后的数组。当不带参数调用sort()时，数组元素以字母表顺序排序：
var a = new Array("banana", "cherry", "apple");
a.sort();
var s = a.join(", ");  // s == "apple, banana, cherry"
如果数组包含undefined元素，它们会被排到数组的尾部。

为了按照其他方式而非字母顺序进行数组排序，必须给sort()方法传递一个比较函数。用数值大小而非字母表顺序进行数组排序，代码如下：
var a = [33, 4, 1111, 222];
a.sort();                 // Alphabetical order:  1111, 222, 33, 4
a.sort(function(a,b) {    // Numerical order: 4, 33, 222, 1111
           return a-b;    // Returns &lt; 0, 0, or &gt; 0, depending on order
       });
a.sort(function(a,b) {return b-a});   // Reverse numerical order

这里使用匿名函数表达式非常方便。


另一个数组元素排序的例子，需要对一个字符串数组执行不区分大小写的字母表排序，比较函数首先将参数都转化为小写字符串，再开始比较：
a = ['ant', 'Bug', 'cat', 'Dog']
a.sort();                // case-sensitive sort: ['Bug','Dog','ant',cat']
a.sort(function(s,t) {   // Case-insensitive sort
           var a = s.toLowerCase();
           var b = t.toLowerCase();
           if (a < b) return -1;
           if (a > b) return 1;
           return 0;
       });               // => ['ant','Bug','cat','Dog']


	   
array.concat()方法创建并返回一个新数组，它的元素包括调用concat()的原始数组的原始和concat()的每个参数。
var a = [1,2,3];
a.concat(4, 5)          // Returns [1,2,3,4,5]
a.concat([4,5]);        // Returns [1,2,3,4,5]
a.concat([4,5],[6,7])   // Returns [1,2,3,4,5,6,7]
a.concat(4, [5,[6,7]])  // Returns [1,2,3,4,5,[6,7]]


slice()
array.slice()方法返回指定数组的一个片段或子数组。它的两个参数分别指定了片段的开始和结束的位置。返回的数组包含第一个参数指定的位置和所有到但不包含第二个参数指定的位置之间的所有数组元素。如果只指定一个参数，返回的数组将包含从开始位置到数组结尾的所有元素。如参数中出现负数，它表示相对于数组中最后一个元素的位置，如参数-1指定了最后一个元素，而-3指定了倒数第三个元素。slice()不会修改调用的数组，如下：

var a = [1,2,3,4,5];
a.slice(0,3);    // Returns [1,2,3]	   
a.slice(3);      // Returns [4,5]
a.slice(1,-1);   // Returns [2,3,4]
a.slice(-3,-2);  // Returns [3]


array.splice()方法是在数组中插入或删除元素的通用方法。splice()能够从数组中删除元素、插入元素到数组中或者同时完成这两种操作。在插入或者删除点之后的数组元素会根据需要增加或减小它们的索引值。因此数组的其他部分仍然保持连续。splice()的第一参数指定了插入或删除的起始位置。第二个参数指定了应该从数组中删除的元素的个数。如果省略第二个参数，从起始点开始到数组结尾的所有元素都将被删除。splice()返回一个由删除元素组成的数组，或者如果没有删除元素就返回一个空数组，如：
var a = [1,2,3,4,5,6,7,8];
a.splice(4);    // Returns [5,6,7,8]; a is [1,2,3,4]
a.splice(1,2);  // Returns [2,3]; a is [1,4]
a.splice(1,1);  // Returns [4]; a is [1]


splice()的前两个参数指定了需要删除的数组元素。紧随其后的任意个数的参数指定了需要插入到数组中的元素，从第一个参数指定的位置开始插入，如：

var a = [1,2,3,4,5];
a.splice(2,0,'a','b');  // Returns []; a is [1,2,'a','b',3,4,5]
a.splice(2,2,[1,2],3);  // Returns ['a','b']; a is [1,2,[1,2],3,3,4,5]

区别与concat()，splice()会插入数组本身而非数组的元素。


push()和pop()方法允许将数组当做栈来使用，push方法在数组的尾部添加一个或多个元素，并返回数组新的长度。pop方法则相反：它删除数组的最后一个元素，减小数组长度并返回它删除的值。两个方法都修改并替换原始数组。如：
var stack = [];       // stack: []
stack.push(1,2);      // stack: [1,2]      Returns 2
stack.pop();          // stack: [1]        Returns 2
stack.push(3);        // stack: [1,3]      Returns 2
stack.pop();          // stack: [1]        Returns 3
stack.push([4,5]);    // stack: [1,[4,5]]  Returns 2
stack.pop()           // stack: [1]        Returns [4,5]
stack.pop();          // stack: []         Returns 1


unshift()和shift()在数组的头部而非尾部进行元素的插入和删除操作。unshift()在数组的头部添加一个或多个元素，并将已存在的元素移动到更高索引的位置来获得足够的空间，最后返回数组新的长度。shift()删除数组的第一元素并将其返回，然后把所有随后的元素下移一个位置来填补数组头部的空缺，如：
var a = [];            // a:[]
a.unshift(1);          // a:[1]         Returns: 1
a.unshift(22);         // a:[22,1]      Returns: 2
a.shift();             // a:[1]         Returns: 22
a.unshift(3,[4,5]);    // a:[3,[4,5],1] Returns: 3
a.shift();             // a:[[4,5],1]   Returns: 3
a.shift();             // a:[1]         Returns: [4,5]
a.shift();             // a:[]          Returns: 1

参数是一次性插入的而非一次一个地插入，这意味着最终的数组中插入的元素的顺序和它们在参数列表中的顺序一致。而假如元素是一次一个地插入，它们的顺序应该是反过来的。


toString()方法将其每个元素转化为字符串，并且输出用逗号分隔的字符串列表。如：
[1,2,3].toString()          // Yields '1,2,3'
["a", "b", "c"].toString()  // Yields 'a,b,c'
[1, [2,'c']].toString()     // Yields '1,2,c'


ECMAScript 5中的数组方法：
ECMAScript 5中定义了9个新的数组方法来遍历、映射、过滤、检测、简化和搜索数组。

foreach()
此方法从头到尾遍历数组，为每个元素调用指定的函数。
var data = [1,2,3,4,5];                           // An array to sum
// Compute the sum of the array elements
var sum = 0;                                      // Start at 0
data.forEach(function(value) { sum += value; });  // Add each value to sum
sum                                               // => 15
// Now increment each array element
data.forEach(function(v, i, a) { a[i] = v + 1; });
data                                              // => [2,3,4,5,6]


如果要提前终止，必须把foreach()方法放在一个try块中，并能抛出一个异常。如：
function foreach(a,f,t) {
    try { a.forEach(f,t); }
    catch(e) {
    if (e === foreach.break) return; 
    else throw e;
    }
}
foreach.break = new Error("StopIteration");


map()方法将调用的数组的每个元素传递给指定的函数，并返回一个数组，它包含改函数的返回值，如：
a = [1, 2, 3];
b = a.map(function(x) { return x*x; });  // b is [1, 4, 9]
map()返回的是新数组，它不修改调用的数组。


filter()方法返回的数组元素是调用的数组的一个子集。传递的函数是用来逻辑判定的：该函数返回true或者false。如：
a = [5, 4, 3, 2, 1];
smallvalues = a.filter(function(x) { return x < 3 });   // [2, 1]
everyother = a.filter(function(x,i) { return i%2==0 }); // [5, 3, 1]

filter()会跳过稀疏数组中缺少的元素，它的返回数组总是稠密的。为了压缩稀疏数组的空缺，代码如下：
var dense = sparse.filter(function() { return true; });

压缩空缺并删除undefined和null元素，可以这样使用filter():
a = a.filter(function(x) { return x !== undefined && x != null; });



every()和some()方法是数组的逻辑判定：它们对数组元素应用指定的函数进行判定，返回true或者false。
every()方法相当于所有当且仅当针对数组中的所有元素调用判定函数都返回true，它才返回true:
a = [1,2,3,4,5];
a.every(function(x) { return x < 10; })      // => true: all values < 10.
a.every(function(x) { return x % 2 === 0; }) // => false: not all values even.

some()方法相当于存在，如下：
a = [1,2,3,4,5];
a.some(function(x) { return x%2===0; })  // => true a has some even numbers.
a.some(isNaN)                            // => false: a has no non-numbers.



reduce()和reduceRight()方法使用指定的函数将数组元素进行组合，生成单个值。


indexOf()和lastIndexOf()方法搜索整个数组中具有给定值的元素，返回找到的第一个元素的索引或者如果没有找到就返回-1。indexOf从头到尾搜索，而lastIndexOf则相反：

a = [0,1,2,1,0];
a.indexOf(1)       // => 1: a[1] is 1
a.lastIndexOf(1)   // => 3: a[3] is 1
a.indexOf(3)       // => -1: no element has value 3



如下函数在一个数组中搜索指定的值并返回包含所有匹配的数组索引的一个数组。


数组类型：
可以使用Array.isArray()函数来判断一个未知的对象，是否为数组：
Array.isArray([])     // => true
Array.isArray({})     // => false



类数组对象

作为数组的字符串：
字符串的行为类似于只读的数组。除了使用charAt()方法来访问单个的字符以外，还可以使用方括号：
var s = test;
s.charAt(0)  // => "t"
s[1]         // => "e"


































