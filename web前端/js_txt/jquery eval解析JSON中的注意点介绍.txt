
在JS中将JSON的字符串解析成JSON数据格式，一般有两种方式：

1.一种为使用eval()函数。
2. 使用Function对象来进行返回解析。

用jquery解析JSON数据的方法,作为jquery异步请求的传输对象，jquery请求后返回的结果是json对象,这里考虑的都是服务器返回JSON形式的字符串的形式，对于利用JSONObject等插件封装的JSON对象，与此亦是大同小异，这里不再做说明。
这里首先给出JSON字符串集，字符串集如下： 

代码如下:
   
   var data="
   {
      root:
      [
      {name:'1',value:'0'},
      {name:'6101',value:'北京市'},
      {name:'6102',value:'天津市'},
      {name:'6103',value:'上海市'},
      {name:'6104',value:'重庆市'},
      {name:'6105',value:'渭南市'},
      {name:'6106',value:'延安市'},
      {name:'6107',value:'汉中市'},
      {name:'6108',value:'榆林市'},
      {name:'6109',value:'安康市'},
      {name:'6110',value:'商洛市'}
      ]
   }"; 
   
这里以jquery异步获取的数据类型——json对象和字符串为依据，分别介绍两种方式获取到的结果处理方式。

1.对于服务器返回的JSON字符串，如果jquery异步请求没做类型说明，或者以字符串方式接受，那么需要做一次对象化处理，方式不是太麻烦，就是将该字符串放于eval()中执行一次。这种方式也适合以普通javascipt方式获取json对象，以下举例说明：
    
    var dataObj=eval("("+data+")");//转换为json对象
    为什么要 eval这里要添加 “("("+data+")");//”呢？
    
    原因在于：eval本身的问题。 由于json是以”{}”的方式来开始以及结束的，在JS中，它会被当成一个语句块来处理，所以必须强制性的将它转换成一种表达式。
    
    加上圆括号的目的是迫使eval函数在处理JavaScript代码的时候强制将括号内的表达式（expression）转化为对象，而不是作为语句（statement）来执行。举一个例子，例如对象字面量{}，如若不加外层的括号，那么eval会将大括号识别为JavaScript代码块的开始和结束标记，那么{}将会被认为是执行了一句空语句。所以下面两个执行结果是不同的：
    复制代码 代码如下:
    
    alert(eval("{}"); // return undefined
    alert(eval("({})");// return object[Object] 

	
	对于这种写法，在JS中，可以到处看到。如: (function()) {}(); 做闭包操作时等。 
    	
    代码如下:
    alert(dataObj.root.length);//输出root的子对象数量
    $.each(dataObj.root,fucntion(idx,item){
    if(idx==0){
    return true;
    }
    //输出每个root子对象的名称和值
    alert("name:"+item.name+",value:"+item.value);
    })
    
    注：对于一般的js生成json对象，只需要将$.each()方法替换为for语句即可，其他不变。 	
	
	
	

2.对于服务器返回的JSON字符串，如果jquery异步请求将type（一般为这个配置属性）设为“json”，或者利用$.getJSON()方法获得服务器返回，那么就不需要eval（）方法了，因为这时候得到的结果已经是json对象了，只需直接调用该对象即可，这里以$.getJSON方法为例说明数据处理方法： 
    
    代码如下:
    $.getJSON("http://www.phpzixue.cn/",{param:"gaoyusi"},function(data){
    //此处返回的data已经是json对象
    //以下其他操作同第一种情况
    $.each(data.root,function(idx,item){
    if(idx==0){
        return true;//同countinue，返回false同break
    }
    alert("name:"+item.name+",value:"+item.value);
    });
    });
	
	
这里特别需要注意的是方式1中的eval()方法是动态执行其中字符串（可能是js脚本）的，这样很容易会造成系统的安全问题。所以可以采用一些规避了eval()的第三方客户端脚本库，比如JSON in JavaScript就提供了一个不超过3k的脚本库。

第二种解析方式就是使用Function对象来完成，它的典型应用就是在JQUERY中的AJAX方法下的success等对于返回数据data的解析 ，代码如下：
    var json='{"name":"CJ","age":18}';
    data =(new Function("","return "+json))(); 

此时的data就是一个会解析成一个 json对象了. 	


