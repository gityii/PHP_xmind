1 什么是回调

回调函数就是那些自己写的，但是不是自己来调，而是给别人来调的函数。

 软件模块之间总是存在着一定的接口，从调用方式上，可以把他们分为三类：同步调用、回调和异步调用。

同步调用是一种阻塞式调用，调用方要等待对方执行完毕才返回，它是一种单向调用；

回调是一种双向调用模式，也就是说，被调用方在接口被调用时也会调用对方的接口；

异步调用是一种类似消息或事件的机制，不过它的调用方向刚好相反，接口的服务在收到某种讯息或发生某种事件时，会主动通知客户方（即调用客户方的接口）。

回调和异步调用的关系非常紧密，通常我们使用回调来实现异步消息的注册，通过异步调用来实现消息的通知。同步调用是三者当中最简单的，而回调又常常是异步调用的基础，因此，下面我们着重讨论回调机制在不同软件架构中的实现。

对于不同类型的语言（如结构化语言和对象语言）、平台（Win32、JDK）或构架（CORBA、DCOM、WebService），客户和服务的交互除了同步方式以外，都需要具备一定的异步通知机制，让服务方（或接口提供方）在某些情况下能够主动通知客户，而回调是实现异步的一个最简捷的途径。对于一般的结构化语言，可以通过回调函数来实现回调。回调函数也是一个函数或过程，不过它是一个由调用方自己实现，供被调用方使用的特殊函数。

在面向对象的语言中，回调则是通过接口或抽象类来实现的，我们把实现这种接口的类成为回调类，回调类的对象成为回调对象。对于象C++或Object Pascal这些兼容了过程特性的对象语言，不仅提供了回调对象、回调方法等特性，也能兼容过程语言的回调函数机制。Windows平台的消息机制也可以看作是回调的一种应用，我们通过系统提供的接口注册消息处理函数（即回调函数），从而实现接收、处理消息的目的。由于Windows平台的API是用C语言来构建的，我们可以认为它也是回调函数的一个特例。对于分布式组件代理体系CORBA，异步处理有多种方式，如回调、事件服务、通知服务等。事件服务和通知服务是CORBA用来处理异步消息的标准服务，他们主要负责消息的处理、派发、维护等工作。对一些简单的异步处理过程，我们可以通过回调机制来实现。



2 PHP的回调函数的实现方法

2.1 全局函数的回调

     这里的全局函数的意思，是直接使用function定义的函数，它不包含在任何对象或类之中。请看下面的例子
function fnCallBack( $msg1 , $msg2 )
{
    echo 'msg1:'.$msg1;
    echo "<br />\n";
    echo 'msg2:'.$msg2;
}


$fnName = "fnCallBack"; //方法名
$params = array( 'hello' , 'world' );//传给参数的值
call_user_func_array( $fnName , $params );

代码说明：
这里使用了PHP内置的函数call_user_func_array来进行调用。call_user_func_array有两个参数，第1个参数是一个字符串，表示要调用的函数名，第2个参数是一个数组，表示参数列表，按照顺序依次会传递给要调用的函数。



2.2 类的静态方法的回调

如果我们要回调的方法，是一个类的静态方法，那怎么办呢？我们依然可以利用PHP内置的call_user_func_array方法来进行调用，请看示例：
示例代码：
class MyClass
{
    public static function fnCallBack( $msg1 , $msg2 )
    {
        echo 'msg1:'.$msg1;
        echo "<br />\n";
        echo 'msg2:'.$msg2;
    }
}


$className = 'MyClass'; //类名
$fnName = "fnCallBack";//类中的方法名
$params = array( 'hello' , 'world' );//传给参数的值
call_user_func_array( array( $className , $fnName ) , $params );


代码说明：

这段代码和第1种方法的代码很相似，我们将类名（MyClass）也作为call_user_func_array的第1个参数传递进去，就可以实现类的静态方法的回调了。注意，这时call_user_func_array的第1个参数是一个数组了，数组的第1个元素是类名，第二个元素是要调用的函数名

如果我用这种方法调用一个类的非静态方法（也就是把static去掉），会出现什么结果呢？请看下面代码
class MyClass
{
    public function fnCallBack( $msg1 , $msg2 )
    {
        echo 'msg1:'.$msg1;
        echo "<br />\n";
        echo 'msg2:'.$msg2;
    }
}
$className = 'MyClass';
$fnName = "fnCallBack";
$params = array( 'hello' , 'world' );
call_user_func_array( array( $className , $fnName ) , $params );
最终运行的结果跟原来一样。



2.3 对象的方法的回调

  我先用最原始的字符串形式的调用方法尝试了一下，如下所示：

class MyClass
{
    private $name = 'abc';
    public function fnCallBack( $msg1 = 'default msg1' , $msg2 = 'default msg2' )
    {
        echo 'object name:'.$this->name;
        echo "<br />\n";
        echo 'msg1:'.$msg1;
        echo "<br />\n";
        echo 'msg2:'.$msg2;
    }
}
$myobj = new MyClass();
$fnName = "fnCallBack";
$params = array( 'hello' , 'world' );
$myobj->$fnName();


调用是成功了，不过如何把参数params传给这个方法呢，如果把params直接传进去，那么它会作为1个参数，怎么把params拆开来传进去呢？查了下PHP手册，找到了create_function函数，这个方法可以用字符串来创建一个匿名函数，好，有思路了，可以创建一个匿名的函数，在这个匿名函数中，调用我们的回调函数，并把参数传进去。

我先手动创建一个匿名函数anonymous，在这个函数中，用前面试出来的方法调用回调函数，如下所示：

class MyClass
{
    private $name = 'abc';
    public function fnCallBack( $msg1 = 'default msg1' , $msg2 = 'default msg2' )
    {
        echo 'object name:'.$this->name;
         echo "<br />\n";
        echo 'msg1:'.$msg1;
        echo "<br />\n";
        echo 'msg2:'.$msg2;
    }
}

$myobj = new MyClass();
$fnName = "fnCallBack";
$params = array( 'hello' , 'world' );
//匿名函数的构建
function （$anonymous)
{
    global $myobj;
    global $fnName;
    global $params;
    $myobj->$fnName( $params[0] , $params[1] );
}
$anonymous();

成功了。



----------------------------------------------------------------------------------------------------------------------

 其他语言里的回调函数的概念与之相似，只不过各种语言里回调函数的实现机制不一样，通俗的来说，回调函数是一个我们定义的函数，但是不是我们直接来调用，而是通过另一个函数来调用，这个函数通过接收回调函数的名字和参数来实现对它的调用。

二、php中回调函数的实现

php提供了两个内置函数call_user_func()和call_user_func_array()提供对回调函数的支持。这两个函数的区别是call_user_func_array是以数组的形式接收回调函数的参数的，看它的原型就知道了：mixed call_user_func_array ( callable $callback ,array$param_arr )，它只有两个参数。而call_user_func($callback，参数1，参数2，…)的参数个数根据回调函数的参数来确定的。

如何实现对脚本中全局函数、类中未使用$this的非静态方法、类中使用$this的非静态方法（需要传入对象）、类中静态方法的回调呢，下面是测试通过的代码。

<?php  
   
//普通函数    
function f1($arg1,$arg2)    
{    
   echo __FUNCTION__.'exec,the args is:'.$arg1.' '.$arg2;    
   echo "<br/>";    
}    
   
//通过call_user_func调用函数f1    
call_user_func('f1','han','wen');    

   //通过call_user_func_array调用函数    
call_user_func_array('f1',array('han','wen'));    
class A    
{    
   public $name;    

   function show($arg1)    
   {    
	   echo 'the arg is:'.$arg1."<br/>";    
	   echo 'my name is:'.$this->name;    
	   echo "<br/>";    
   }    
   function show1($arg1,$arg2)    
   {    
	   echo __METHOD__.' exec,the args is:'.$arg1.' '.$arg2."<br/>";    
   }    
   public static function show2($arg1,$arg2)    
   {    
	   echo __METHOD__.' of class A exec, the args is:'.$arg1.' '.$arg2."<br/>";    
   }    

}    
//调用类中非静态成员函数，该成员函数中有$this调用了对象中的成员    
$a = new A;    
$a->name = 'wen';           
call_user_func_array(array($a,'show',),array('han!'));  

//调用类中非静态成员函数，没有对象被创建，该成员函数中不能有$this  
call_user_func_array(array('A','show1',),array('han!','wen'));    

//调用类中静态成员函数  
call_user_func_array(array('A','show2'),array('argument1','argument2'));  




----------------------------------------------------------------------------------------------------------------------

回调函数callback

我们都知道在js中经常处理异步请求的时候,如果使用普通的函数,可能无法保证异步请求完成后调用。所以就存在了callback函数,特别是在文件处理和ajax处理的时候,回调函数的作用就非常的大了。 
函数call_user_func() 
mixed call_user_func ( callable $callback [, mixed $parameter [, mixed $… ]] )

return 返回一个复合类型的值,实际上是callback函数返回的值

callable $callback 回调函数 可以是函数名,可以是数组,可以是字符串

mixed $parameter 函数的参数,以顺序的方式显示

下面来介绍一下使用demo 

demo1: 回调php函数 字符串形式：

<?php
$data = array("name"=>"callback" , "value"=>"test");

$rs1 = http_build_query($data);      //直接调用php函数

$rs2  = call_user_func("http_build_query",$data); //使用回调函数

echo $rs1;  //name=callback&value=test

echo "<br />";

echo $rs2;  //name=callback&value=test

// 这里需要注意的是,参数1必须是可使用的函数可以通过function_exists()返回true的函数，这里提醒isset,empty,is_null 等认为的常用函数实际上是一个操作符.并不能算函数。


demo2 回调php函数 函数名变量形式：

<?php
//自定义函数
function myUrldecode($str){

    return urldecode($str);

}

$data = array("name"=>"callback" , "value"=>"天才");

$str  = http_build_query($data); 

$rs1  = urldecode($str);      //urlencode编码

$rs2  = call_user_func(myUrldecode,$str);

echo $rs1;  //name=callback&value=天才

echo "<br />";

echo $rs2;  //name=callback&value=天才

//这里我们可以看到,我们直接使用函数的名称也是可以的,不需要带引号字符串。

?>




demo3 回调 类方法 数组格式：

<?php 

class MyClass{
    private $demo = "test";

    function myUrldecode($str){
        return urldecode($str);
    }
    static  function myUrlencode($str){
        return urlencode($str) ;
    }
}
$str = "?query=/test/demo1";

$encode  = call_user_func(array(MyClass,"myUrlencode"),$str);

//直接使用类的静态方法 将字符串进行url编码 不再是字符串或者函数名,而是一个数组格式,第一个项表示类名,第二个项则表示方法名。 第一项可以为类的引用地址,第二项为静态方法名称

$decode  = call_user_func(array("MyClass","myUrlencode"),$encode);

//同样是使用类的方法,不过调用的是普通方法名称。

echo $encode;  //%3Fquery%3D%2Ftest%2Fdemo1

echo "<br />"; //?query=/test/demo1

echo $decode;

//注意 使用方法名也具有作用域的概念,即private protected 和 public,通常回调类方法都只能调用publi 和默认作用域的 方法。

//同时如果是普通方法,并且内部使用了$this变量,那么进行调用是无法成功的.

?>



demo4 回调类方法 字符串格式：

<?php
class MyClass{

    private $demo = "test";

    function myUrldecode($str){
        return urldecode($str);
    }

    private function myUrldecode2($str){
    return urldecode($str);
    }
    static  function myUrlencode($str){
        return urlencode($str) ;
    }
}

$str = "?query=/test/demo1";

  $encode  = call_user_func("MyClass::myUrlencode",$str);

  $decode  = call_user_func("MyClass::myUrldecode",$encode);

  echo $encode; //  %3Fquery%3D%2Ftest%2Fdemo1

  echo "<br />";

  echo $decode; //  ?query=/test/demo1

  $encode2  = call_user_func("MyClass::myUrlencode2",$str);

  var_dump($encode2);  // null

//如果直接使用字符串的方法的话,那么必须在类和方法名中添加::作为分割。

//这里我们发现不是静态方法也可以用::进行调用

//这里进行了一个测试,发现调用private 作用域的方法返回的是一个null值,说明确实存在作用域的关系

?>



demo5 回调对象方法 数组格式：

<?php

class MyClass{

    private $demo = "test";


    function myUrldecode($str){
        return urldecode($str)  ."-" .$this->demo ; //调用内部的this作用域
    }
    static  function myUrlencode($str){
        return urlencode($str);
    }
}

 $str = "?query=/test/demo1";

 $class =  new MyClass();

 $encode  = call_user_func(array($class,"myUrlencode"),$str);

 $decode  = call_user_func(array($class,"myUrldecode"),$str);

 echo $encode; //%3Fquery%3D%2Ftest%2Fdemo1

 echo "<br />";

 echo $decode; //?query=/test/demo1-test

 //很明显,如果使用对象做为回调函数,内部的private 属性和方法也可以使用,但是对外的方法必须为默认或者 public类型

 //对象数组方式第一个选项必须为一个对象
?>



有时候我们发现传递的参数可能并不是固定的,那么使用call_user_func()会给人带来一定的麻烦,这时候可以使用call_user_func_array()方法了,大部分的使用方式是一样的，只是参数上的使用会有些不同. 


函数call_user_func_array()

demo1 回调php函数 不定参数

<?php 

   $record1 = array(
            'id' => 2135,
    );
    $record2 = array(
        'first_name' => 'Sally',
    );
    $record3 = array(
        'last_name' => 'Jones',
    );
$return  = array_merge($record1,$record2,$record3);

//如果使用回调函数,则如下

$return  = call_user_func_array("array_merge", array($record1,$record2,$record3));

print_r($return); //Array ( [id] => 2135 [first_name] => Sally [last_name] => Jones )

//一些特别的函数允许你有不固定的参数,如果你还将它作为回调函数,则可以使用这个方法进行调用.
?>


tips1 如何判断是否为可回调函数： 
bool is_callable ( callable $name [, bool $syntax_only = false [, string &$callable_name ]] )

name 

要检查的回调函数。
 
syntax_only 

如果设置为 TRUE，这个函数仅仅验证 name 可能是函数或方法。
 
callable_name 

接受“可调用的名称”。 

return 

如果 name 可调用则返回 TRUE，否则返回 FALSE

<?php
// is_callable(); 
$bool = is_callable(urlencode);  // true
$bool = is_callable(urlencode,false);  // true
$bool = is_callable(urlencode,true);  // true
$bool = is_callable("urlencode",false,$callable_name1);
// string urlencode
$bool = is_callable("urldecode",true,$callable_name2); 
// string urldecode 即使不存在回调函数也会返回true
?>


tips2 获取函数的参数 类似于js中的arguments：

<?php

//这里指的是非客户端php脚本

function sum($first,$second){

$args = func_get_args(); //获取列表  

//func_get_arg($index) 则获取指定的位置的参数

$len  = func_num_args(); //获取长度
$sum = 0 ; 
foreach($args as $key=>$val){
 $sum += (int) $val; 
}
return $sum;
}

$rs = sum(1,2,3,4,5);

var_dump($rs); //  int 15

//注意: 在sum函数中修改了$first,$second的变量,同时又不是引用对象 变量的话,则不会修改
?>















